#### THIS CODE WAS AUTO-GENERATED BY gen_from_tables.py ####
if "OpType" in globals():
    opcodes = [
        ["NOP",0x0000,0xfffc,1,0,[],False,False,'no operation'],
        ["DAR",0x0004,0xfffc,1,1,[[OpType.REG,1,0,0,0x0003]],False,False,'$arD--'],
        ["IAR",0x0008,0xfffc,1,1,[[OpType.REG,1,0,0,0x0003]],False,False,'$arD++'],
        ["SUBARN",0x000c,0xfffc,1,1,[[OpType.REG,1,0,0,0x0003]],False,False,'$arD -= $ixS'],
        ["ADDARN",0x0010,0xfff0,1,2,[[OpType.REG,1,0,0,0x0003],[OpType.REG04,1,0,2,0x000c]],False,False,'$arD += $ixS'],
        ["HALT",0x0021,0xffff,1,0,[],False,True,'halt until reset'],
        ["RETGE",0x02d0,0xffff,1,0,[],False,False,'return if greater or equal'],
        ["RETL",0x02d1,0xffff,1,0,[],False,False,'return if less'],
        ["RETG",0x02d2,0xffff,1,0,[],False,False,'return if greater'],
        ["RETLE",0x02d3,0xffff,1,0,[],False,False,'return if less or equal'],
        ["RETNZ",0x02d4,0xffff,1,0,[],False,False,'return if not zero'],
        ["RETZ",0x02d5,0xffff,1,0,[],False,False,'return if zero'],
        ["RETNC",0x02d6,0xffff,1,0,[],False,False,'return if not carry'],
        ["RETC",0x02d7,0xffff,1,0,[],False,False,'return if carry'],
        ["RETx8",0x02d8,0xffff,1,0,[],False,False,'return if TODO'],
        ["RETx9",0x02d9,0xffff,1,0,[],False,False,'return if TODO'],
        ["RETxA",0x02da,0xffff,1,0,[],False,False,'return if TODO'],
        ["RETxB",0x02db,0xffff,1,0,[],False,False,'return if TODO'],
        ["RETLNZ",0x02dc,0xffff,1,0,[],False,False,'return if logic not zero'],
        ["RETLZ",0x02dd,0xffff,1,0,[],False,False,'return if logic zero'],
        ["RETO",0x02de,0xffff,1,0,[],False,False,'return if overflow'],
        ["RET",0x02df,0xffff,1,0,[],False,True,'unconditional return'],
        ["RTI",0x02ff,0xffff,1,0,[],False,True,'return from interrupt'],
        ["CALLGE",0x02b0,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,False,'call if greater or equal'],
        ["CALLL",0x02b1,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,False,'call if less'],
        ["CALLG",0x02b2,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,False,'call if greater'],
        ["CALLLE",0x02b3,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,False,'call if less or equal'],
        ["CALLNZ",0x02b4,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,False,'call if not zero'],
        ["CALLZ",0x02b5,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,False,'call if zero'],
        ["CALLNC",0x02b6,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,False,'call if not carry'],
        ["CALLC",0x02b7,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,False,'call if carry'],
        ["CALLx8",0x02b8,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,False,'call if TODO'],
        ["CALLx9",0x02b9,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,False,'call if TODO'],
        ["CALLxA",0x02ba,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,False,'call if TODO'],
        ["CALLxB",0x02bb,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,False,'call if TODO'],
        ["CALLLNZ",0x02bc,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,False,'call if logic not zero'],
        ["CALLLZ",0x02bd,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,False,'call if logic zero'],
        ["CALLO",0x02be,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,False,'call if overflow'],
        ["CALL",0x02bf,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,True,'unconditional call'],
        ["IFGE",0x0270,0xffff,1,0,[],False,False,'if greater or equal'],
        ["IFL",0x0271,0xffff,1,0,[],False,False,'if less'],
        ["IFG",0x0272,0xffff,1,0,[],False,False,'if greater'],
        ["IFLE",0x0273,0xffff,1,0,[],False,False,'if less or equal'],
        ["IFNZ",0x0274,0xffff,1,0,[],False,False,'if not zero'],
        ["IFZ",0x0275,0xffff,1,0,[],False,False,'if zero'],
        ["IFNC",0x0276,0xffff,1,0,[],False,False,'if not carry'],
        ["IFC",0x0277,0xffff,1,0,[],False,False,'if carry'],
        ["IFx8",0x0278,0xffff,1,0,[],False,False,'if TODO'],
        ["IFx9",0x0279,0xffff,1,0,[],False,False,'if TODO'],
        ["IFxA",0x027a,0xffff,1,0,[],False,False,'if TODO'],
        ["IFxB",0x027b,0xffff,1,0,[],False,False,'if TODO'],
        ["IFLNZ",0x027c,0xffff,1,0,[],False,False,'if logic not zero'],
        ["IFLZ",0x027d,0xffff,1,0,[],False,False,'if logic zero'],
        ["IFO",0x027e,0xffff,1,0,[],False,False,'if overflow'],
        ["IF",0x027f,0xffff,1,0,[],False,True,"what is this, I don't even..."],
        ["JGE",0x0290,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,False,'jump if greater or equal'],
        ["JL",0x0291,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,False,'jump if less'],
        ["JG",0x0292,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,False,'jump if greater'],
        ["JLE",0x0293,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,False,'jump if less or equal'],
        ["JNZ",0x0294,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,False,'jump if not zero'],
        ["JZ",0x0295,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,False,'jump if zero'],
        ["JNC",0x0296,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,False,'jump if not carry'],
        ["JC",0x0297,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,False,'jump if carry'],
        ["JMPx8",0x0298,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,False,'jump if TODO'],
        ["JMPx9",0x0299,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,False,'jump if TODO'],
        ["JMPxA",0x029a,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,False,'jump if TODO'],
        ["JMPxB",0x029b,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,False,'jump if TODO'],
        ["JLNZ",0x029c,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,False,'jump if logic not zero'],
        ["JLZ",0x029d,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,False,'jump if logic zero'],
        ["JO",0x029e,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,False,'jump if overflow'],
        ["JMP",0x029f,0xffff,2,1,[[OpType.ADDR_I,2,1,0,0xffff]],False,True,'unconditional jump'],
        ["JRGE",0x1700,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,False,'jump to $R if greater or equal'],
        ["JRL",0x1701,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,False,'jump to $R if less'],
        ["JRG",0x1702,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,False,'jump to $R if greater'],
        ["JRLE",0x1703,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,False,'jump to $R if less or equal'],
        ["JRNZ",0x1704,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,False,'jump to $R if not zero'],
        ["JRZ",0x1705,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,False,'jump to $R if zero'],
        ["JRNC",0x1706,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,False,'jump to $R if not carry'],
        ["JRC",0x1707,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,False,'jump to $R if carry'],
        ["JMPRx8",0x1708,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,False,'jump to $R if TODO'],
        ["JMPRx9",0x1709,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,False,'jump to $R if TODO'],
        ["JMPRxA",0x170a,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,False,'jump to $R if TODO'],
        ["JMPRxB",0x170b,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,False,'jump to $R if TODO'],
        ["JRLNZ",0x170c,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,False,'jump to $R if logic not zero'],
        ["JRLZ",0x170d,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,False,'jump to $R if logic zero'],
        ["JRO",0x170e,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,False,'jump to $R if overflow'],
        ["JMPR",0x170f,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,True,'jump to $R'],
        ["CALLRGE",0x1710,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,False,'call $R if greater or equal'],
        ["CALLRL",0x1711,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,False,'call $R if less'],
        ["CALLRG",0x1712,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,False,'call $R if greater'],
        ["CALLRLE",0x1713,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,False,'call $R if less or equal'],
        ["CALLRNZ",0x1714,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,False,'call $R if not zero'],
        ["CALLRZ",0x1715,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,False,'call $R if zero'],
        ["CALLRNC",0x1716,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,False,'call $R if not carry'],
        ["CALLRC",0x1717,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,False,'call $R if carry'],
        ["CALLRx8",0x1718,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,False,'call $R if TODO'],
        ["CALLRx9",0x1719,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,False,'call $R if TODO'],
        ["CALLRxA",0x171a,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,False,'call $R if TODO'],
        ["CALLRxB",0x171b,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,False,'call $R if TODO'],
        ["CALLRLNZ",0x171c,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,False,'call $R if logic not zero'],
        ["CALLRLZ",0x171d,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,False,'call $R if logic zero'],
        ["CALLRO",0x171e,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,False,'call $R if overflow'],
        ["CALLR",0x171f,0xff1f,1,1,[[OpType.REG,1,0,5,0x00e0]],False,True,'call $R'],
        ["SBCLR",0x1200,0xff00,1,1,[[OpType.IMM,1,0,0,0x0007]],False,False,'$sr &= ~(I + 6)'],
        ["SBSET",0x1300,0xff00,1,1,[[OpType.IMM,1,0,0,0x0007]],False,False,'$sr |= (I + 6)'],
        ["LSL",0x1400,0xfec0,1,2,[[OpType.ACC,1,0,8,0x0100],[OpType.IMM,1,0,0,0x003f]],False,False,'$acR <<= I'],
        ["LSR",0x1440,0xfec0,1,2,[[OpType.ACC,1,0,8,0x0100],[OpType.IMM,1,0,0,0x003f]],False,False,'$acR >>= I (shifting in zeros)'],
        ["ASL",0x1480,0xfec0,1,2,[[OpType.ACC,1,0,8,0x0100],[OpType.IMM,1,0,0,0x003f]],False,False,'$acR <<= I'],
        ["ASR",0x14c0,0xfec0,1,2,[[OpType.ACC,1,0,8,0x0100],[OpType.IMM,1,0,0,0x003f]],False,False,'$acR >>= I (shifting in sign bits)'],
        ["LSRN",0x02ca,0xffff,1,0,[],False,False,'$ac0 >>=/<<= $ac1.m[0-6]'],
        ["ASRN",0x02cb,0xffff,1,0,[],False,False,'$ac0 >>=/<<= $ac1.m[0-6] (arithmetic)'],
        ["LRI",0x0080,0xffe0,2,2,[[OpType.REG,1,0,0,0x001f],[OpType.IMM,2,1,0,0xffff]],False,False,'$D = I'],
        ["LR",0x00c0,0xffe0,2,2,[[OpType.REG,1,0,0,0x001f],[OpType.MEM,2,1,0,0xffff]],False,False,'$D = MEM[M]'],
        ["SR",0x00e0,0xffe0,2,2,[[OpType.MEM,2,1,0,0xffff],[OpType.REG,1,0,0,0x001f]],False,False,'MEM[M] = $S'],
        ["MRR",0x1c00,0xfc00,1,2,[[OpType.REG,1,0,5,0x03e0],[OpType.REG,1,0,0,0x001f]],False,False,'$D = $S'],
        ["SI",0x1600,0xff00,2,2,[[OpType.MEM,1,0,0,0x00ff],[OpType.IMM,2,1,0,0xffff]],False,False,'MEM[M] = I'],
        ["ADDIS",0x0400,0xfe00,1,2,[[OpType.ACCM,1,0,8,0x0100],[OpType.IMM,1,0,0,0x00ff]],False,False,'$acD.hm += I'],
        ["CMPIS",0x0600,0xfe00,1,2,[[OpType.ACCM,1,0,8,0x0100],[OpType.IMM,1,0,0,0x00ff]],False,False,'FLAGS($acD - I)'],
        ["LRIS",0x0800,0xf800,1,2,[[OpType.REG18,1,0,8,0x0700],[OpType.IMM,1,0,0,0x00ff]],False,False,'$(D+24) = I'],
        ["ADDI",0x0200,0xfeff,2,2,[[OpType.ACCM,1,0,8,0x0100],[OpType.IMM,2,1,0,0xffff]],False,False,'$acD.hm += I'],
        ["XORI",0x0220,0xfeff,2,2,[[OpType.ACCM,1,0,8,0x0100],[OpType.IMM,2,1,0,0xffff]],False,False,'$acD.m ^= I'],
        ["ANDI",0x0240,0xfeff,2,2,[[OpType.ACCM,1,0,8,0x0100],[OpType.IMM,2,1,0,0xffff]],False,False,'$acD.m &= I'],
        ["ORI",0x0260,0xfeff,2,2,[[OpType.ACCM,1,0,8,0x0100],[OpType.IMM,2,1,0,0xffff]],False,False,'$acD.m |= I'],
        ["CMPI",0x0280,0xfeff,2,2,[[OpType.ACCM,1,0,8,0x0100],[OpType.IMM,2,1,0,0xffff]],False,False,'FLAGS(($acD.hm - I) | $acD.l)'],
        ["ANDF",0x02a0,0xfeff,2,2,[[OpType.ACCM,1,0,8,0x0100],[OpType.IMM,2,1,0,0xffff]],False,False,'$sr.LZ = ($acD.m & I) == 0 ? 1 : 0'],
        ["ANDCF",0x02c0,0xfeff,2,2,[[OpType.ACCM,1,0,8,0x0100],[OpType.IMM,2,1,0,0xffff]],False,False,'$sr.LZ = ($acD.m & I) == I ? 1 : 0'],
        ["ILRR",0x0210,0xfefc,1,2,[[OpType.ACCM,1,0,8,0x0100],[OpType.PRG,1,0,0,0x0003]],False,False,'$acD.m = IMEM[$arS]'],
        ["ILRRD",0x0214,0xfefc,1,2,[[OpType.ACCM,1,0,8,0x0100],[OpType.PRG,1,0,0,0x0003]],False,False,'$acD.m = IMEM[$arS--]'],
        ["ILRRI",0x0218,0xfefc,1,2,[[OpType.ACCM,1,0,8,0x0100],[OpType.PRG,1,0,0,0x0003]],False,False,'$acD.m = IMEM[$arS++]'],
        ["ILRRN",0x021c,0xfefc,1,2,[[OpType.ACCM,1,0,8,0x0100],[OpType.PRG,1,0,0,0x0003]],False,False,'$acD.m = IMEM[$arS]; $arS += $ixS'],
        ["LOOP",0x0040,0xffe0,1,1,[[OpType.REG,1,0,0,0x001f]],False,True,'run next instruction $R times'],
        ["BLOOP",0x0060,0xffe0,2,2,[[OpType.REG,1,0,0,0x001f],[OpType.ADDR_I,2,1,0,0xffff]],False,True,'COMEFROM addr $R times'],
        ["LOOPI",0x1000,0xff00,1,1,[[OpType.IMM,1,0,0,0x00ff]],False,True,'run next instruction I times'],
        ["BLOOPI",0x1100,0xff00,2,2,[[OpType.IMM,1,0,0,0x00ff],[OpType.ADDR_I,2,1,0,0xffff]],False,True,'COMEFROM addr I times'],
        ["LRR",0x1800,0xff80,1,2,[[OpType.REG,1,0,0,0x001f],[OpType.PRG,1,0,5,0x0060]],False,False,'$D = MEM[$arS]'],
        ["LRRD",0x1880,0xff80,1,2,[[OpType.REG,1,0,0,0x001f],[OpType.PRG,1,0,5,0x0060]],False,False,'$D = MEM[$arS--]'],
        ["LRRI",0x1900,0xff80,1,2,[[OpType.REG,1,0,0,0x001f],[OpType.PRG,1,0,5,0x0060]],False,False,'$D = MEM[$arS++]'],
        ["LRRN",0x1980,0xff80,1,2,[[OpType.REG,1,0,0,0x001f],[OpType.PRG,1,0,5,0x0060]],False,False,'$D = MEM[$arS]; $arS += $ixS'],
        ["SRR",0x1a00,0xff80,1,2,[[OpType.PRG,1,0,5,0x0060],[OpType.REG,1,0,0,0x001f]],False,False,'MEM[$arD] = $S'],
        ["SRRD",0x1a80,0xff80,1,2,[[OpType.PRG,1,0,5,0x0060],[OpType.REG,1,0,0,0x001f]],False,False,'MEM[$arD--] = $S'],
        ["SRRI",0x1b00,0xff80,1,2,[[OpType.PRG,1,0,5,0x0060],[OpType.REG,1,0,0,0x001f]],False,False,'MEM[$arD++] = $S'],
        ["SRRN",0x1b80,0xff80,1,2,[[OpType.PRG,1,0,5,0x0060],[OpType.REG,1,0,0,0x001f]],False,False,'MEM[$arD] = $S; $arD += $ixD'],
        ["LRS",0x2000,0xf800,1,2,[[OpType.REG18,1,0,8,0x0700],[OpType.MEM,1,0,0,0x00ff]],False,False,'$(D+24) = MEM[($cr[0-7] << 8) | I]'],
        ["SRS",0x2800,0xf800,1,2,[[OpType.MEM,1,0,0,0x00ff],[OpType.REG18,1,0,8,0x0700]],False,False,'MEM[($cr[0-7] << 8) | I] = $(S+24)'],
        ["XORR",0x3000,0xfc80,1,2,[[OpType.ACCM,1,0,8,0x0100],[OpType.REG1A,1,0,9,0x0200]],True,False,'$acD.m ^= $axS.h'],
        ["ANDR",0x3400,0xfc80,1,2,[[OpType.ACCM,1,0,8,0x0100],[OpType.REG1A,1,0,9,0x0200]],True,False,'$acD.m &= $axS.h'],
        ["ORR",0x3800,0xfc80,1,2,[[OpType.ACCM,1,0,8,0x0100],[OpType.REG1A,1,0,9,0x0200]],True,False,'$acD.m |= $axS.h'],
        ["ANDC",0x3c00,0xfe80,1,2,[[OpType.ACCM,1,0,8,0x0100],[OpType.ACCM_D,1,0,8,0x0100]],True,False,'$acD.m &= $ac(1-D).m'],
        ["ORC",0x3e00,0xfe80,1,2,[[OpType.ACCM,1,0,8,0x0100],[OpType.ACCM_D,1,0,8,0x0100]],True,False,'$acD.m |= $ac(1-D).m'],
        ["XORC",0x3080,0xfe80,1,2,[[OpType.ACCM,1,0,8,0x0100],[OpType.ACCM_D,1,0,8,0x0100]],True,False,'$acD.m ^= $ac(1-D).m'],
        ["NOT",0x3280,0xfe80,1,1,[[OpType.ACCM,1,0,8,0x0100]],True,False,'$acD.m = ~$acD.m'],
        ["LSRNRX",0x3480,0xfc80,1,2,[[OpType.ACC,1,0,8,0x0100],[OpType.REG1A,1,0,9,0x0200]],True,False,'$acD >>=/<<= $axS.h[0-6]'],
        ["ASRNRX",0x3880,0xfc80,1,2,[[OpType.ACC,1,0,8,0x0100],[OpType.REG1A,1,0,9,0x0200]],True,False,'$acD >>=/<<= $axS.h[0-6] (arithmetic)'],
        ["LSRNR",0x3c80,0xfe80,1,2,[[OpType.ACC,1,0,8,0x0100],[OpType.ACCM_D,1,0,8,0x0100]],True,False,'$acD >>=/<<= $ac(1-D).m[0-6]'],
        ["ASRNR",0x3e80,0xfe80,1,2,[[OpType.ACC,1,0,8,0x0100],[OpType.ACCM_D,1,0,8,0x0100]],True,False,'$acD >>=/<<= $ac(1-D).m[0-6] (arithmetic)'],
        ["ADDR",0x4000,0xf800,1,2,[[OpType.ACC,1,0,8,0x0100],[OpType.REG18,1,0,9,0x0600]],True,False,'$acD += $(S+24)'],
        ["ADDAX",0x4800,0xfc00,1,2,[[OpType.ACC,1,0,8,0x0100],[OpType.AX,1,0,9,0x0200]],True,False,'$acD += $axS'],
        ["ADD",0x4c00,0xfe00,1,2,[[OpType.ACC,1,0,8,0x0100],[OpType.ACC_D,1,0,8,0x0100]],True,False,'$acD += $ac(1-D)'],
        ["ADDP",0x4e00,0xfe00,1,1,[[OpType.ACC,1,0,8,0x0100]],True,False,'$acD += $prod'],
        ["SUBR",0x5000,0xf800,1,2,[[OpType.ACC,1,0,8,0x0100],[OpType.REG18,1,0,9,0x0600]],True,False,'$acD -= $(S+24)'],
        ["SUBAX",0x5800,0xfc00,1,2,[[OpType.ACC,1,0,8,0x0100],[OpType.AX,1,0,9,0x0200]],True,False,'$acD -= $axS'],
        ["SUB",0x5c00,0xfe00,1,2,[[OpType.ACC,1,0,8,0x0100],[OpType.ACC_D,1,0,8,0x0100]],True,False,'$acD -= $ac(1-D)'],
        ["SUBP",0x5e00,0xfe00,1,1,[[OpType.ACC,1,0,8,0x0100]],True,False,'$acD -= $prod'],
        ["MOVR",0x6000,0xf800,1,2,[[OpType.ACC,1,0,8,0x0100],[OpType.REG18,1,0,9,0x0600]],True,False,'$acD.hm = $(S+24); $acD.l = 0'],
        ["MOVAX",0x6800,0xfc00,1,2,[[OpType.ACC,1,0,8,0x0100],[OpType.AX,1,0,9,0x0200]],True,False,'$acD = $axS'],
        ["MOV",0x6c00,0xfe00,1,2,[[OpType.ACC,1,0,8,0x0100],[OpType.ACC_D,1,0,8,0x0100]],True,False,'$acD = $ax(1-D)'],
        ["MOVP",0x6e00,0xfe00,1,1,[[OpType.ACC,1,0,8,0x0100]],True,False,'$acD = $prod'],
        ["ADDAXL",0x7000,0xfc00,1,2,[[OpType.ACC,1,0,8,0x0100],[OpType.REG18,1,0,9,0x0200]],True,False,'$acD += $axS.l'],
        ["INCM",0x7400,0xfe00,1,1,[[OpType.ACCM,1,0,8,0x0100]],True,False,'$acsD++'],
        ["INC",0x7600,0xfe00,1,1,[[OpType.ACC,1,0,8,0x0100]],True,False,'$acD++'],
        ["DECM",0x7800,0xfe00,1,1,[[OpType.ACCM,1,0,8,0x0100]],True,False,'$acsD--'],
        ["DEC",0x7a00,0xfe00,1,1,[[OpType.ACC,1,0,8,0x0100]],True,False,'$acD--'],
        ["NEG",0x7c00,0xfe00,1,1,[[OpType.ACC,1,0,8,0x0100]],True,False,'$acD = -$acD'],
        ["MOVNP",0x7e00,0xfe00,1,1,[[OpType.ACC,1,0,8,0x0100]],True,False,'$acD = -$prod'],
        ["NX",0x8000,0xf700,1,0,[],True,False,'extendable nop'],
        ["CLR",0x8100,0xf700,1,1,[[OpType.ACC,1,0,11,0x0800]],True,False,'$acD = 0'],
        ["CMP",0x8200,0xff00,1,0,[],True,False,'FLAGS($ac0 - $ac1)'],
        ["MULAXH",0x8300,0xff00,1,0,[],True,False,'$prod = $ax0.h * $ax0.h'],
        ["CLRP",0x8400,0xff00,1,0,[],True,False,'$prod = 0'],
        ["TSTPROD",0x8500,0xff00,1,0,[],True,False,'FLAGS($prod)'],
        ["TSTAXH",0x8600,0xfe00,1,1,[[OpType.REG1A,1,0,8,0x0100]],True,False,'FLAGS($axR.h)'],
        ["M2",0x8a00,0xff00,1,0,[],True,False,'enable "$prod *= 2" after every multiplication'],
        ["M0",0x8b00,0xff00,1,0,[],True,False,'disable "$prod *= 2" after every multiplication'],
        ["CLR15",0x8c00,0xff00,1,0,[],True,False,'set normal multiplication'],
        ["SET15",0x8d00,0xff00,1,0,[],True,False,'set unsigned multiplication in MUL'],
        ["SET16",0x8e00,0xff00,1,0,[],True,False,'set 16 bit sign extension width'],
        ["SET40",0x8f00,0xff00,1,0,[],True,False,'set 40 bit sign extension width'],
        ["MUL",0x9000,0xf700,1,2,[[OpType.REG18,1,0,11,0x0800],[OpType.REG1A,1,0,11,0x0800]],True,False,'$prod = $axS.l * $axS.h'],
        ["ASR16",0x9100,0xf700,1,1,[[OpType.ACC,1,0,11,0x0800]],True,False,'$acD >>= 16 (shifting in sign bits)'],
        ["MULMVZ",0x9200,0xf600,1,3,[[OpType.REG18,1,0,11,0x0800],[OpType.REG1A,1,0,11,0x0800],[OpType.ACC,1,0,8,0x0100]],True,False,'$acR.hm = $prod.hm; $acR.l = 0; $prod = $axS.l * $axS.h'],
        ["MULAC",0x9400,0xf600,1,3,[[OpType.REG18,1,0,11,0x0800],[OpType.REG1A,1,0,11,0x0800],[OpType.ACC,1,0,8,0x0100]],True,False,'$acR += $prod; $prod = $axS.l * $axS.h'],
        ["MULMV",0x9600,0xf600,1,3,[[OpType.REG18,1,0,11,0x0800],[OpType.REG1A,1,0,11,0x0800],[OpType.ACC,1,0,8,0x0100]],True,False,'$acR = $prod; $prod = $axS.l * $axS.h'],
        ["MULX",0xa000,0xe700,1,2,[[OpType.REGM18,1,0,11,0x1000],[OpType.REGM19,1,0,10,0x0800]],True,False,'$prod = $ax0.S * $ax1.T'],
        ["ABS",0xa100,0xf700,1,1,[[OpType.ACC,1,0,11,0x0800]],True,False,'$acD = abs($acD)'],
        ["MULXMVZ",0xa200,0xe600,1,3,[[OpType.REGM18,1,0,11,0x1000],[OpType.REGM19,1,0,10,0x0800],[OpType.ACC,1,0,8,0x0100]],True,False,'$acR.hm = $prod.hm; $acR.l = 0; $prod = $ax0.S * $ax1.T'],
        ["MULXAC",0xa400,0xe600,1,3,[[OpType.REGM18,1,0,11,0x1000],[OpType.REGM19,1,0,10,0x0800],[OpType.ACC,1,0,8,0x0100]],True,False,'$acR += $prod; $prod = $ax0.S * $ax1.T'],
        ["MULXMV",0xa600,0xe600,1,3,[[OpType.REGM18,1,0,11,0x1000],[OpType.REGM19,1,0,10,0x0800],[OpType.ACC,1,0,8,0x0100]],True,False,'$acR = $prod; $prod = $ax0.S * $ax1.T'],
        ["TST",0xb100,0xf700,1,1,[[OpType.ACC,1,0,11,0x0800]],True,False,'FLAGS($acR)'],
        ["MULC",0xc000,0xe700,1,2,[[OpType.ACCM,1,0,12,0x1000],[OpType.REG1A,1,0,11,0x0800]],True,False,'$prod = $acS.m * $axS.h'],
        ["CMPAR",0xc100,0xe700,1,2,[[OpType.ACC,1,0,12,0x1000],[OpType.REG1A,1,0,11,0x0800]],True,False,'FLAGS($acS - axR.h)'],
        ["MULCMVZ",0xc200,0xe600,1,3,[[OpType.ACCM,1,0,12,0x1000],[OpType.REG1A,1,0,11,0x0800],[OpType.ACC,1,0,8,0x0100]],True,False,'$acR.hm, $acR.l, $prod = $prod.hm, 0, $acS.m * $axS.h'],
        ["MULCAC",0xc400,0xe600,1,3,[[OpType.ACCM,1,0,12,0x1000],[OpType.REG1A,1,0,11,0x0800],[OpType.ACC,1,0,8,0x0100]],True,False,'$acR, $prod = $acR + $prod, $acS.m * $axS.h'],
        ["MULCMV",0xc600,0xe600,1,3,[[OpType.ACCM,1,0,12,0x1000],[OpType.REG1A,1,0,11,0x0800],[OpType.ACC,1,0,8,0x0100]],True,False,'$acR, $prod = $prod, $acS.m * $axS.h'],
        ["MADDX",0xe000,0xfc00,1,2,[[OpType.REGM18,1,0,8,0x0200],[OpType.REGM19,1,0,7,0x0100]],True,False,'$prod += $ax0.S * $ax1.T'],
        ["MSUBX",0xe400,0xfc00,1,2,[[OpType.REGM18,1,0,8,0x0200],[OpType.REGM19,1,0,7,0x0100]],True,False,'$prod -= $ax0.S * $ax1.T'],
        ["MADDC",0xe800,0xfc00,1,2,[[OpType.ACCM,1,0,9,0x0200],[OpType.REG19,1,0,7,0x0100]],True,False,'$prod += $acS.m * $axT.h'],
        ["MSUBC",0xec00,0xfc00,1,2,[[OpType.ACCM,1,0,9,0x0200],[OpType.REG19,1,0,7,0x0100]],True,False,'$prod -= $acS.m * $axT.h'],
        ["LSL16",0xf000,0xfe00,1,1,[[OpType.ACC,1,0,8,0x0100]],True,False,'$acR <<= 16'],
        ["MADD",0xf200,0xfe00,1,2,[[OpType.REG18,1,0,8,0x0100],[OpType.REG1A,1,0,8,0x0100]],True,False,'$prod += $axS.l * $axS.h'],
        ["LSR16",0xf400,0xfe00,1,1,[[OpType.ACC,1,0,8,0x0100]],True,False,'$acR >>= 16'],
        ["MSUB",0xf600,0xfe00,1,2,[[OpType.REG18,1,0,8,0x0100],[OpType.REG1A,1,0,8,0x0100]],True,False,'$prod -= $axS.l * $axS.h'],
        ["ADDPAXZ",0xf800,0xfc00,1,2,[[OpType.ACC,1,0,9,0x0200],[OpType.AX,1,0,8,0x0100]],True,False,'$acD.hm = $prod.hm + $ax.h; $acD.l = 0'],
        ["CLRL",0xfc00,0xfe00,1,1,[[OpType.ACCL,1,0,11,0x0800]],True,False,'$acR.l = 0'],
        ["MOVPZ",0xfe00,0xfe00,1,1,[[OpType.ACC,1,0,8,0x0100]],True,False,'$acD.hm = $prod.hm; $acD.l = 0']
    ]

    opcodes_ext = [
        ["XXX",0x0000,0x00fc,1,1,[[OpType.VAL,1,0,0,0x00ff]],False,False,'no operation'],
        ["DR",0x0004,0x00fc,1,1,[[OpType.REG,1,0,0,0x0003]],False,False,'$arR--'],
        ["IR",0x0008,0x00fc,1,1,[[OpType.REG,1,0,0,0x0003]],False,False,'$arR++'],
        ["NR",0x000c,0x00fc,1,1,[[OpType.REG,1,0,0,0x0003]],False,False,'$arR += $ixR'],
        ["MV",0x0010,0x00f0,1,2,[[OpType.REG18,1,0,2,0x000c],[OpType.REG1C,1,0,0,0x0003]],False,False,'$(D+24) = $(S+28)'],
        ["S",0x0020,0x00e4,1,2,[[OpType.PRG,1,0,0,0x0003],[OpType.REG1C,1,0,3,0x0018]],False,False,'MEM[$D++] = $(S+28)'],
        ["SN",0x0024,0x00e4,1,2,[[OpType.PRG,1,0,0,0x0003],[OpType.REG1C,1,0,3,0x0018]],False,False,'MEM[$D] = $(D+28); $D += $(D+4)'],
        ["L",0x0040,0x00c4,1,2,[[OpType.REG18,1,0,3,0x0038],[OpType.PRG,1,0,0,0x0003]],False,False,'$(D+24) = MEM[$S++]'],
        ["LN",0x0044,0x00c4,1,2,[[OpType.REG18,1,0,3,0x0038],[OpType.PRG,1,0,0,0x0003]],False,False,'$(D+24) = MEM[$S]; $S += $(S+4)'],
        ["LS",0x0080,0x00ce,1,2,[[OpType.REG18,1,0,4,0x0030],[OpType.ACCM,1,0,0,0x0001]],False,False,'$(D+24) = MEM[$ar0++]; MEM[$ar3++] = $acS.m'],
        ["SL",0x0082,0x00ce,1,2,[[OpType.ACCM,1,0,0,0x0001],[OpType.REG18,1,0,4,0x0030]],False,False,'MEM[$ar0++] = $acS.m; $(D+24) = MEM[$ar3++]'],
        ["LSN",0x0084,0x00ce,1,2,[[OpType.REG18,1,0,4,0x0030],[OpType.ACCM,1,0,0,0x0001]],False,False,'$(D+24) = MEM[$ar0]; MEM[$ar3++] = $acS.m; $ar0 += $ix0'],
        ["SLN",0x0086,0x00ce,1,2,[[OpType.ACCM,1,0,0,0x0001],[OpType.REG18,1,0,4,0x0030]],False,False,'MEM[$ar0] = $acS.m; $(D+24) = MEM[$ar3++]; $ar0 += $ix0'],
        ["LSM",0x0088,0x00ce,1,2,[[OpType.REG18,1,0,4,0x0030],[OpType.ACCM,1,0,0,0x0001]],False,False,'$(D+24) = MEM[$ar0++]; MEM[$ar3] = $acS.m; $ar3 += $ix3'],
        ["SLM",0x008a,0x00ce,1,2,[[OpType.ACCM,1,0,0,0x0001],[OpType.REG18,1,0,4,0x0030]],False,False,'MEM[$ar0++] = $acS.m; $(D+24) = MEM[$ar3]; $ar3 += $ix3'],
        ["LSNM",0x008c,0x00ce,1,2,[[OpType.REG18,1,0,4,0x0030],[OpType.ACCM,1,0,0,0x0001]],False,False,'$(D+24) = MEM[$ar0]; MEM[$ar3] = $acS.m; $ar0 += $ix0; $ar3 += $ix3'],
        ["SLNM",0x008e,0x00ce,1,2,[[OpType.ACCM,1,0,0,0x0001],[OpType.REG18,1,0,4,0x0030]],False,False,'MEM[$ar0] = $acS.m; $(D+24) = MEM[$ar3]; $ar0 += $ix0; $ar3 += $ix3'],
        ["LDAX",0x00c3,0x00cf,1,2,[[OpType.AX,1,0,4,0x0010],[OpType.PRG,1,0,5,0x0020]],False,False,'$axR.h = MEM[$arS++]; $axR.l = MEM[$ar3++]'],
        ["LDAXN",0x00c7,0x00cf,1,2,[[OpType.AX,1,0,4,0x0010],[OpType.PRG,1,0,5,0x0020]],False,False,'$axR.h = MEM[$arS]; $axR.l = MEM[$ar3++]; $arS += $ixS'],
        ["LDAXM",0x00cb,0x00cf,1,2,[[OpType.AX,1,0,4,0x0010],[OpType.PRG,1,0,5,0x0020]],False,False,'$axR.h = MEM[$arS++]; $axR.l = MEM[$ar3]; $ar3 += $ix3'],
        ["LDAXNM",0x00cf,0x00cf,1,2,[[OpType.AX,1,0,4,0x0010],[OpType.PRG,1,0,5,0x0020]],False,False,'$axR.h = MEM[$arS]; $axR.l = MEM[$ar3]; $arS += $ixS; $ar3 += $ix3'],
        ["LD",0x00c0,0x00cc,1,3,[[OpType.REGM18,1,0,4,0x0020],[OpType.REGM19,1,0,3,0x0010],[OpType.PRG,1,0,0,0x0003]],False,False,'$ax0.D = MEM[$arS++]; $ax1.R = MEM[$ar3++]'],
        ["LDN",0x00c4,0x00cc,1,3,[[OpType.REGM18,1,0,4,0x0020],[OpType.REGM19,1,0,3,0x0010],[OpType.PRG,1,0,0,0x0003]],False,False,'$ax0.D = MEM[$arS]; $ax1.R = MEM[$ar3++]; $arS += $ixS'],
        ["LDM",0x00c8,0x00cc,1,3,[[OpType.REGM18,1,0,4,0x0020],[OpType.REGM19,1,0,3,0x0010],[OpType.PRG,1,0,0,0x0003]],False,False,'$ax0.D = MEM[$arS++]; $ax1.R = MEM[$ar3]; $ar3 += $ix3'],
        ["LDNM",0x00cc,0x00cc,1,3,[[OpType.REGM18,1,0,4,0x0020],[OpType.REGM19,1,0,3,0x0010],[OpType.PRG,1,0,0,0x0003]],False,False,'$ax0.D = MEM[$arS]; $ax1.R = MEM[$ar3]; $arS += $ixS; $ar3 += $ix3']
    ]
#### END AUTO-GENERATED CODE ####
